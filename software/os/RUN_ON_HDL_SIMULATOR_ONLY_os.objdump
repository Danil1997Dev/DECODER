
RUN_ON_HDL_SIMULATOR_ONLY_os.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_os.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000a20 memsz 0x00000a20 flags r-x
    LOAD off    0x00001a40 vaddr 0x00000a40 paddr 0x00000d08 align 2**12
         filesz 0x000002c8 memsz 0x000002c8 flags rw-
    LOAD off    0x00001fd0 vaddr 0x00000fd0 paddr 0x00000fd0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001d08  2**0
                  CONTENTS
  2 .text         00000a08  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00000a28  00000a28  00001a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002c8  00000a40  00000d08  00001a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000fd0  00000fd0  00001fd0  2**2
                  ALLOC, SMALL_DATA
  6 .ram          00000000  00000fe0  00000fe0  00001d08  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002f8  00000000  00000000  00001d30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003aa5  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013a2  00000000  00000000  00005acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001765  00000000  00000000  00006e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004d0  00000000  00000000  000085d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f27  00000000  00000000  00008aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000472  00000000  00000000  000099cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000b8  00000000  00000000  00009e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000afb6  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0000afb9  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000afbc  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000afbd  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  0000afbe  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  0000afc2  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  0000afc6  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  0000afca  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001a  00000000  00000000  0000afd2  2**0
                  CONTENTS, READONLY
 25 .jdi          0000354f  00000000  00000000  0000afec  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002d1cf  00000000  00000000  0000e53b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000a28 l    d  .rodata	00000000 .rodata
00000a40 l    d  .rwdata	00000000 .rwdata
00000fd0 l    d  .bss	00000000 .bss
00000fe0 l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../os_bsp//obj/HAL/src/crt0.o
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 sem.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000a54 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_load.c
00000324 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000460 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
000005f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000728 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000410 g     F .text	00000050 alt_main
0000013c g     F .text	00000080 _puts_r
00000d08 g       *ABS*	00000000 __flash_rwdata_start
00000ce4 g     O .rwdata	00000004 Ku
000007f8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000fd0 g     O .bss	00000004 errno
00000fd8 g     O .bss	00000004 alt_argv
00008cdc g       *ABS*	00000000 _gp
00000b5c g     O .rwdata	00000180 alt_fd_list
000001bc g     F .text	00000014 puts
00000000 g       *ABS*	00000000 __alt_mem_ram
000002fc g     F .text	00000028 alt_dcache_flush
00000d00 g     O .rwdata	00000004 alt_max_fd
00000a40 g     O .rwdata	00000014 caff
00000ce8 g     O .rwdata	00000004 _global_impure_ptr
00000fe0 g       *ABS*	00000000 __bss_end
00000b34 g     O .rwdata	00000028 alt_dev_null
00000708 g     F .text	00000020 alt_dcache_flush_all
00000d08 g       *ABS*	00000000 __ram_rwdata_end
00000cf8 g     O .rwdata	00000008 alt_dev_list
0000049c g     F .text	00000100 write
00000a40 g       *ABS*	00000000 __ram_rodata_end
00000fe0 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
0000083c g     F .text	00000190 __call_exitprocs
00000020 g     F .text	0000001c _start
000005d4 g     F .text	00000020 alt_sys_init
000009cc g     F .text	00000028 .hidden __mulsi3
00000a40 g       *ABS*	00000000 __ram_rwdata_start
00000a28 g       *ABS*	00000000 __ram_rodata_start
00000fe0 g       *ABS*	00000000 __alt_stack_base
000001ec g     F .text	000000b8 __sfvwrite_small_dev
00000fd0 g       *ABS*	00000000 __bss_start
0000003c g     F .text	00000100 main
00000fdc g     O .bss	00000004 alt_envp
00000d04 g     O .rwdata	00000004 alt_errno
00000a28 g       *ABS*	00000000 __flash_rodata_start
0000059c g     F .text	00000038 alt_irq_init
00000774 g     F .text	00000084 alt_release_fd
000002a4 g     F .text	00000058 _write_r
00000cec g     O .rwdata	00000004 _impure_ptr
00000fd4 g     O .bss	00000004 alt_argc
00000cf0 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000d08 g       *ABS*	00000000 _edata
00000fe0 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000081c g     F .text	00000020 exit
00020000 g       *ABS*	00000000 __alt_data_end
000009f4 g     F .text	00000034 _exit
000001d0 g     F .text	0000001c strlen
00000754 g     F .text	00000020 alt_icache_flush_all
00000cdc g     O .rwdata	00000008 range
00000630 g     F .text	000000d8 close
0000038c g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a33714 	ori	gp,gp,36060
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  30:	000038c0 	call	38c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  34:	00004100 	call	410 <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  38:	003fff06 	br	38 <__alt_data_end+0xfffe0038>

0000003c <main>:
};

float Ku = 2*3.14*440000;

int main()
{ 
  3c:	defff904 	addi	sp,sp,-28
  40:	dfc00615 	stw	ra,24(sp)
  44:	df000515 	stw	fp,20(sp)
  48:	df000504 	addi	fp,sp,20
	int i,j;
	volatile float *p;
	volatile float *pk;
	volatile int *pr;

	pk = (float*) DECODER_BASE + 16;
  4c:	008000b4 	movhi	r2,2
  50:	10841004 	addi	r2,r2,4160
  54:	e0bfff15 	stw	r2,-4(fp)
	*pk = Ku;
  58:	d0e00217 	ldw	r3,-32760(gp)
  5c:	e0bfff17 	ldw	r2,-4(fp)
  60:	10c00015 	stw	r3,0(r2)

	pr = (int*) DECODER_BASE + 16 + 8;
  64:	008000b4 	movhi	r2,2
  68:	10841804 	addi	r2,r2,4192
  6c:	e0bffe15 	stw	r2,-8(fp)
	for (j=0; j<LIMIT; j++)
  70:	e03ffc15 	stw	zero,-16(fp)
  74:	00000e06 	br	b0 <main+0x74>
		{
			*pr = range[j];
  78:	e0bffc17 	ldw	r2,-16(fp)
  7c:	1085883a 	add	r2,r2,r2
  80:	1087883a 	add	r3,r2,r2
  84:	d0a00004 	addi	r2,gp,-32768
  88:	1885883a 	add	r2,r3,r2
  8c:	10c00017 	ldw	r3,0(r2)
  90:	e0bffe17 	ldw	r2,-8(fp)
  94:	10c00015 	stw	r3,0(r2)
			pr++;
  98:	e0bffe17 	ldw	r2,-8(fp)
  9c:	10800104 	addi	r2,r2,4
  a0:	e0bffe15 	stw	r2,-8(fp)

	pk = (float*) DECODER_BASE + 16;
	*pk = Ku;

	pr = (int*) DECODER_BASE + 16 + 8;
	for (j=0; j<LIMIT; j++)
  a4:	e0bffc17 	ldw	r2,-16(fp)
  a8:	10800044 	addi	r2,r2,1
  ac:	e0bffc15 	stw	r2,-16(fp)
  b0:	e0bffc17 	ldw	r2,-16(fp)
  b4:	10800090 	cmplti	r2,r2,2
  b8:	103fef1e 	bne	r2,zero,78 <__alt_data_end+0xfffe0078>
		{
			*pr = range[j];
			pr++;
		}

	p = (float*) DECODER_BASE + 8;
  bc:	008000b4 	movhi	r2,2
  c0:	10840804 	addi	r2,r2,4128
  c4:	e0bffd15 	stw	r2,-12(fp)
	for (i=0; i<SET; i++)
  c8:	e03ffb15 	stw	zero,-20(fp)
  cc:	00000f06 	br	10c <main+0xd0>
		{
			*p = caff[i];
  d0:	00800034 	movhi	r2,0
  d4:	10829004 	addi	r2,r2,2624
  d8:	e0fffb17 	ldw	r3,-20(fp)
  dc:	18c7883a 	add	r3,r3,r3
  e0:	18c7883a 	add	r3,r3,r3
  e4:	10c5883a 	add	r2,r2,r3
  e8:	10c00017 	ldw	r3,0(r2)
  ec:	e0bffd17 	ldw	r2,-12(fp)
  f0:	10c00015 	stw	r3,0(r2)
			p++;
  f4:	e0bffd17 	ldw	r2,-12(fp)
  f8:	10800104 	addi	r2,r2,4
  fc:	e0bffd15 	stw	r2,-12(fp)
			*pr = range[j];
			pr++;
		}

	p = (float*) DECODER_BASE + 8;
	for (i=0; i<SET; i++)
 100:	e0bffb17 	ldw	r2,-20(fp)
 104:	10800044 	addi	r2,r2,1
 108:	e0bffb15 	stw	r2,-20(fp)
 10c:	e0bffb17 	ldw	r2,-20(fp)
 110:	10800150 	cmplti	r2,r2,5
 114:	103fee1e 	bne	r2,zero,d0 <__alt_data_end+0xfffe00d0>
			*p = caff[i];
			p++;
		}
	//since we use pointers (cached data access) to write divisor RAM, 
	//and not direct i/o access with IOWR, we need to flush cache
	IOWR_ALTERA_AVALON_INIT_CTL(DECODER_BASE, 0x07);
 118:	00c001c4 	movi	r3,7
 11c:	008000b4 	movhi	r2,2
 120:	10840004 	addi	r2,r2,4096
 124:	10c00035 	stwio	r3,0(r2)
	alt_dcache_flush();
 128:	00002fc0 	call	2fc <alt_dcache_flush>


	printf("Ready\n");
 12c:	01000034 	movhi	r4,0
 130:	21028a04 	addi	r4,r4,2600
 134:	00001bc0 	call	1bc <puts>

	while (1)
	{

	}
 138:	003fff06 	br	138 <__alt_data_end+0xfffe0138>

0000013c <_puts_r>:
 13c:	defffd04 	addi	sp,sp,-12
 140:	dc000015 	stw	r16,0(sp)
 144:	2021883a 	mov	r16,r4
 148:	2809883a 	mov	r4,r5
 14c:	dfc00215 	stw	ra,8(sp)
 150:	dc400115 	stw	r17,4(sp)
 154:	2823883a 	mov	r17,r5
 158:	00001d00 	call	1d0 <strlen>
 15c:	81400217 	ldw	r5,8(r16)
 160:	01000034 	movhi	r4,0
 164:	21007b04 	addi	r4,r4,492
 168:	29000115 	stw	r4,4(r5)
 16c:	100f883a 	mov	r7,r2
 170:	880d883a 	mov	r6,r17
 174:	8009883a 	mov	r4,r16
 178:	00001ec0 	call	1ec <__sfvwrite_small_dev>
 17c:	00ffffc4 	movi	r3,-1
 180:	10c00926 	beq	r2,r3,1a8 <_puts_r+0x6c>
 184:	81400217 	ldw	r5,8(r16)
 188:	01800034 	movhi	r6,0
 18c:	01c00044 	movi	r7,1
 190:	28800117 	ldw	r2,4(r5)
 194:	31828c04 	addi	r6,r6,2608
 198:	8009883a 	mov	r4,r16
 19c:	103ee83a 	callr	r2
 1a0:	10bfffe0 	cmpeqi	r2,r2,-1
 1a4:	0085c83a 	sub	r2,zero,r2
 1a8:	dfc00217 	ldw	ra,8(sp)
 1ac:	dc400117 	ldw	r17,4(sp)
 1b0:	dc000017 	ldw	r16,0(sp)
 1b4:	dec00304 	addi	sp,sp,12
 1b8:	f800283a 	ret

000001bc <puts>:
 1bc:	00800034 	movhi	r2,0
 1c0:	10833b04 	addi	r2,r2,3308
 1c4:	200b883a 	mov	r5,r4
 1c8:	11000017 	ldw	r4,0(r2)
 1cc:	000013c1 	jmpi	13c <_puts_r>

000001d0 <strlen>:
 1d0:	2005883a 	mov	r2,r4
 1d4:	10c00007 	ldb	r3,0(r2)
 1d8:	18000226 	beq	r3,zero,1e4 <strlen+0x14>
 1dc:	10800044 	addi	r2,r2,1
 1e0:	003ffc06 	br	1d4 <__alt_data_end+0xfffe01d4>
 1e4:	1105c83a 	sub	r2,r2,r4
 1e8:	f800283a 	ret

000001ec <__sfvwrite_small_dev>:
 1ec:	2880000b 	ldhu	r2,0(r5)
 1f0:	1080020c 	andi	r2,r2,8
 1f4:	10002126 	beq	r2,zero,27c <__sfvwrite_small_dev+0x90>
 1f8:	2880008f 	ldh	r2,2(r5)
 1fc:	defffa04 	addi	sp,sp,-24
 200:	dc000015 	stw	r16,0(sp)
 204:	dfc00515 	stw	ra,20(sp)
 208:	dd000415 	stw	r20,16(sp)
 20c:	dcc00315 	stw	r19,12(sp)
 210:	dc800215 	stw	r18,8(sp)
 214:	dc400115 	stw	r17,4(sp)
 218:	2821883a 	mov	r16,r5
 21c:	10001216 	blt	r2,zero,268 <__sfvwrite_small_dev+0x7c>
 220:	2027883a 	mov	r19,r4
 224:	3025883a 	mov	r18,r6
 228:	3823883a 	mov	r17,r7
 22c:	05010004 	movi	r20,1024
 230:	04400b0e 	bge	zero,r17,260 <__sfvwrite_small_dev+0x74>
 234:	880f883a 	mov	r7,r17
 238:	a440010e 	bge	r20,r17,240 <__sfvwrite_small_dev+0x54>
 23c:	01c10004 	movi	r7,1024
 240:	8140008f 	ldh	r5,2(r16)
 244:	900d883a 	mov	r6,r18
 248:	9809883a 	mov	r4,r19
 24c:	00002a40 	call	2a4 <_write_r>
 250:	0080050e 	bge	zero,r2,268 <__sfvwrite_small_dev+0x7c>
 254:	88a3c83a 	sub	r17,r17,r2
 258:	90a5883a 	add	r18,r18,r2
 25c:	003ff406 	br	230 <__alt_data_end+0xfffe0230>
 260:	0005883a 	mov	r2,zero
 264:	00000706 	br	284 <__sfvwrite_small_dev+0x98>
 268:	8080000b 	ldhu	r2,0(r16)
 26c:	10801014 	ori	r2,r2,64
 270:	8080000d 	sth	r2,0(r16)
 274:	00bfffc4 	movi	r2,-1
 278:	00000206 	br	284 <__sfvwrite_small_dev+0x98>
 27c:	00bfffc4 	movi	r2,-1
 280:	f800283a 	ret
 284:	dfc00517 	ldw	ra,20(sp)
 288:	dd000417 	ldw	r20,16(sp)
 28c:	dcc00317 	ldw	r19,12(sp)
 290:	dc800217 	ldw	r18,8(sp)
 294:	dc400117 	ldw	r17,4(sp)
 298:	dc000017 	ldw	r16,0(sp)
 29c:	dec00604 	addi	sp,sp,24
 2a0:	f800283a 	ret

000002a4 <_write_r>:
 2a4:	defffd04 	addi	sp,sp,-12
 2a8:	dc000015 	stw	r16,0(sp)
 2ac:	04000034 	movhi	r16,0
 2b0:	dc400115 	stw	r17,4(sp)
 2b4:	8403f404 	addi	r16,r16,4048
 2b8:	2023883a 	mov	r17,r4
 2bc:	2809883a 	mov	r4,r5
 2c0:	300b883a 	mov	r5,r6
 2c4:	380d883a 	mov	r6,r7
 2c8:	dfc00215 	stw	ra,8(sp)
 2cc:	80000015 	stw	zero,0(r16)
 2d0:	000049c0 	call	49c <write>
 2d4:	00ffffc4 	movi	r3,-1
 2d8:	10c0031e 	bne	r2,r3,2e8 <_write_r+0x44>
 2dc:	80c00017 	ldw	r3,0(r16)
 2e0:	18000126 	beq	r3,zero,2e8 <_write_r+0x44>
 2e4:	88c00015 	stw	r3,0(r17)
 2e8:	dfc00217 	ldw	ra,8(sp)
 2ec:	dc400117 	ldw	r17,4(sp)
 2f0:	dc000017 	ldw	r16,0(sp)
 2f4:	dec00304 	addi	sp,sp,12
 2f8:	f800283a 	ret

000002fc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 2fc:	defffd04 	addi	sp,sp,-12
 300:	df000215 	stw	fp,8(sp)
 304:	df000204 	addi	fp,sp,8
 308:	e13ffe15 	stw	r4,-8(fp)
 30c:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 310:	0001883a 	nop
 314:	e037883a 	mov	sp,fp
 318:	df000017 	ldw	fp,0(sp)
 31c:	dec00104 	addi	sp,sp,4
 320:	f800283a 	ret

00000324 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 324:	defffc04 	addi	sp,sp,-16
 328:	df000315 	stw	fp,12(sp)
 32c:	df000304 	addi	fp,sp,12
 330:	e13ffd15 	stw	r4,-12(fp)
 334:	e17ffe15 	stw	r5,-8(fp)
 338:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 33c:	e0fffe17 	ldw	r3,-8(fp)
 340:	e0bffd17 	ldw	r2,-12(fp)
 344:	18800c26 	beq	r3,r2,378 <alt_load_section+0x54>
  {
    while( to != end )
 348:	00000806 	br	36c <alt_load_section+0x48>
    {
      *to++ = *from++;
 34c:	e0bffe17 	ldw	r2,-8(fp)
 350:	10c00104 	addi	r3,r2,4
 354:	e0fffe15 	stw	r3,-8(fp)
 358:	e0fffd17 	ldw	r3,-12(fp)
 35c:	19000104 	addi	r4,r3,4
 360:	e13ffd15 	stw	r4,-12(fp)
 364:	18c00017 	ldw	r3,0(r3)
 368:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 36c:	e0fffe17 	ldw	r3,-8(fp)
 370:	e0bfff17 	ldw	r2,-4(fp)
 374:	18bff51e 	bne	r3,r2,34c <__alt_data_end+0xfffe034c>
    {
      *to++ = *from++;
    }
  }
}
 378:	0001883a 	nop
 37c:	e037883a 	mov	sp,fp
 380:	df000017 	ldw	fp,0(sp)
 384:	dec00104 	addi	sp,sp,4
 388:	f800283a 	ret

0000038c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 38c:	defffe04 	addi	sp,sp,-8
 390:	dfc00115 	stw	ra,4(sp)
 394:	df000015 	stw	fp,0(sp)
 398:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 39c:	01800034 	movhi	r6,0
 3a0:	31834204 	addi	r6,r6,3336
 3a4:	01400034 	movhi	r5,0
 3a8:	29429004 	addi	r5,r5,2624
 3ac:	01000034 	movhi	r4,0
 3b0:	21034204 	addi	r4,r4,3336
 3b4:	00003240 	call	324 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 3b8:	01800034 	movhi	r6,0
 3bc:	31800804 	addi	r6,r6,32
 3c0:	01400034 	movhi	r5,0
 3c4:	29400804 	addi	r5,r5,32
 3c8:	01000034 	movhi	r4,0
 3cc:	21000804 	addi	r4,r4,32
 3d0:	00003240 	call	324 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 3d4:	01800034 	movhi	r6,0
 3d8:	31829004 	addi	r6,r6,2624
 3dc:	01400034 	movhi	r5,0
 3e0:	29428a04 	addi	r5,r5,2600
 3e4:	01000034 	movhi	r4,0
 3e8:	21028a04 	addi	r4,r4,2600
 3ec:	00003240 	call	324 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 3f0:	00007080 	call	708 <alt_dcache_flush_all>
  alt_icache_flush_all();
 3f4:	00007540 	call	754 <alt_icache_flush_all>
}
 3f8:	0001883a 	nop
 3fc:	e037883a 	mov	sp,fp
 400:	dfc00117 	ldw	ra,4(sp)
 404:	df000017 	ldw	fp,0(sp)
 408:	dec00204 	addi	sp,sp,8
 40c:	f800283a 	ret

00000410 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 410:	defffd04 	addi	sp,sp,-12
 414:	dfc00215 	stw	ra,8(sp)
 418:	df000115 	stw	fp,4(sp)
 41c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 420:	0009883a 	mov	r4,zero
 424:	000059c0 	call	59c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 428:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 42c:	00005d40 	call	5d4 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 430:	d0a0be17 	ldw	r2,-32008(gp)
 434:	d0e0bf17 	ldw	r3,-32004(gp)
 438:	d120c017 	ldw	r4,-32000(gp)
 43c:	200d883a 	mov	r6,r4
 440:	180b883a 	mov	r5,r3
 444:	1009883a 	mov	r4,r2
 448:	000003c0 	call	3c <main>
 44c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 450:	01000044 	movi	r4,1
 454:	00006300 	call	630 <close>
  exit (result);
 458:	e13fff17 	ldw	r4,-4(fp)
 45c:	000081c0 	call	81c <exit>

00000460 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 460:	defffe04 	addi	sp,sp,-8
 464:	dfc00115 	stw	ra,4(sp)
 468:	df000015 	stw	fp,0(sp)
 46c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 470:	d0a00a17 	ldw	r2,-32728(gp)
 474:	10000326 	beq	r2,zero,484 <alt_get_errno+0x24>
 478:	d0a00a17 	ldw	r2,-32728(gp)
 47c:	103ee83a 	callr	r2
 480:	00000106 	br	488 <alt_get_errno+0x28>
 484:	d0a0bd04 	addi	r2,gp,-32012
}
 488:	e037883a 	mov	sp,fp
 48c:	dfc00117 	ldw	ra,4(sp)
 490:	df000017 	ldw	fp,0(sp)
 494:	dec00204 	addi	sp,sp,8
 498:	f800283a 	ret

0000049c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 49c:	defff904 	addi	sp,sp,-28
 4a0:	dfc00615 	stw	ra,24(sp)
 4a4:	df000515 	stw	fp,20(sp)
 4a8:	df000504 	addi	fp,sp,20
 4ac:	e13ffd15 	stw	r4,-12(fp)
 4b0:	e17ffe15 	stw	r5,-8(fp)
 4b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4b8:	e0bffd17 	ldw	r2,-12(fp)
 4bc:	10000816 	blt	r2,zero,4e0 <write+0x44>
 4c0:	01400304 	movi	r5,12
 4c4:	e13ffd17 	ldw	r4,-12(fp)
 4c8:	00009cc0 	call	9cc <__mulsi3>
 4cc:	1007883a 	mov	r3,r2
 4d0:	00800034 	movhi	r2,0
 4d4:	1082d704 	addi	r2,r2,2908
 4d8:	1885883a 	add	r2,r3,r2
 4dc:	00000106 	br	4e4 <write+0x48>
 4e0:	0005883a 	mov	r2,zero
 4e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4e8:	e0bffb17 	ldw	r2,-20(fp)
 4ec:	10002126 	beq	r2,zero,574 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4f0:	e0bffb17 	ldw	r2,-20(fp)
 4f4:	10800217 	ldw	r2,8(r2)
 4f8:	108000cc 	andi	r2,r2,3
 4fc:	10001826 	beq	r2,zero,560 <write+0xc4>
 500:	e0bffb17 	ldw	r2,-20(fp)
 504:	10800017 	ldw	r2,0(r2)
 508:	10800617 	ldw	r2,24(r2)
 50c:	10001426 	beq	r2,zero,560 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 510:	e0bffb17 	ldw	r2,-20(fp)
 514:	10800017 	ldw	r2,0(r2)
 518:	10800617 	ldw	r2,24(r2)
 51c:	e0ffff17 	ldw	r3,-4(fp)
 520:	180d883a 	mov	r6,r3
 524:	e17ffe17 	ldw	r5,-8(fp)
 528:	e13ffb17 	ldw	r4,-20(fp)
 52c:	103ee83a 	callr	r2
 530:	e0bffc15 	stw	r2,-16(fp)
 534:	e0bffc17 	ldw	r2,-16(fp)
 538:	1000070e 	bge	r2,zero,558 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 53c:	00004600 	call	460 <alt_get_errno>
 540:	1007883a 	mov	r3,r2
 544:	e0bffc17 	ldw	r2,-16(fp)
 548:	0085c83a 	sub	r2,zero,r2
 54c:	18800015 	stw	r2,0(r3)
        return -1;
 550:	00bfffc4 	movi	r2,-1
 554:	00000c06 	br	588 <write+0xec>
      }
      return rval;
 558:	e0bffc17 	ldw	r2,-16(fp)
 55c:	00000a06 	br	588 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 560:	00004600 	call	460 <alt_get_errno>
 564:	1007883a 	mov	r3,r2
 568:	00800344 	movi	r2,13
 56c:	18800015 	stw	r2,0(r3)
 570:	00000406 	br	584 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 574:	00004600 	call	460 <alt_get_errno>
 578:	1007883a 	mov	r3,r2
 57c:	00801444 	movi	r2,81
 580:	18800015 	stw	r2,0(r3)
  }
  return -1;
 584:	00bfffc4 	movi	r2,-1
}
 588:	e037883a 	mov	sp,fp
 58c:	dfc00117 	ldw	ra,4(sp)
 590:	df000017 	ldw	fp,0(sp)
 594:	dec00204 	addi	sp,sp,8
 598:	f800283a 	ret

0000059c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 59c:	defffd04 	addi	sp,sp,-12
 5a0:	dfc00215 	stw	ra,8(sp)
 5a4:	df000115 	stw	fp,4(sp)
 5a8:	df000104 	addi	fp,sp,4
 5ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 5b0:	00007f80 	call	7f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 5b4:	00800044 	movi	r2,1
 5b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 5bc:	0001883a 	nop
 5c0:	e037883a 	mov	sp,fp
 5c4:	dfc00117 	ldw	ra,4(sp)
 5c8:	df000017 	ldw	fp,0(sp)
 5cc:	dec00204 	addi	sp,sp,8
 5d0:	f800283a 	ret

000005d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 5d4:	deffff04 	addi	sp,sp,-4
 5d8:	df000015 	stw	fp,0(sp)
 5dc:	d839883a 	mov	fp,sp
}
 5e0:	0001883a 	nop
 5e4:	e037883a 	mov	sp,fp
 5e8:	df000017 	ldw	fp,0(sp)
 5ec:	dec00104 	addi	sp,sp,4
 5f0:	f800283a 	ret

000005f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5f4:	defffe04 	addi	sp,sp,-8
 5f8:	dfc00115 	stw	ra,4(sp)
 5fc:	df000015 	stw	fp,0(sp)
 600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 604:	d0a00a17 	ldw	r2,-32728(gp)
 608:	10000326 	beq	r2,zero,618 <alt_get_errno+0x24>
 60c:	d0a00a17 	ldw	r2,-32728(gp)
 610:	103ee83a 	callr	r2
 614:	00000106 	br	61c <alt_get_errno+0x28>
 618:	d0a0bd04 	addi	r2,gp,-32012
}
 61c:	e037883a 	mov	sp,fp
 620:	dfc00117 	ldw	ra,4(sp)
 624:	df000017 	ldw	fp,0(sp)
 628:	dec00204 	addi	sp,sp,8
 62c:	f800283a 	ret

00000630 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 630:	defffb04 	addi	sp,sp,-20
 634:	dfc00415 	stw	ra,16(sp)
 638:	df000315 	stw	fp,12(sp)
 63c:	df000304 	addi	fp,sp,12
 640:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 644:	e0bfff17 	ldw	r2,-4(fp)
 648:	10000816 	blt	r2,zero,66c <close+0x3c>
 64c:	01400304 	movi	r5,12
 650:	e13fff17 	ldw	r4,-4(fp)
 654:	00009cc0 	call	9cc <__mulsi3>
 658:	1007883a 	mov	r3,r2
 65c:	00800034 	movhi	r2,0
 660:	1082d704 	addi	r2,r2,2908
 664:	1885883a 	add	r2,r3,r2
 668:	00000106 	br	670 <close+0x40>
 66c:	0005883a 	mov	r2,zero
 670:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 674:	e0bffd17 	ldw	r2,-12(fp)
 678:	10001926 	beq	r2,zero,6e0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 67c:	e0bffd17 	ldw	r2,-12(fp)
 680:	10800017 	ldw	r2,0(r2)
 684:	10800417 	ldw	r2,16(r2)
 688:	10000626 	beq	r2,zero,6a4 <close+0x74>
 68c:	e0bffd17 	ldw	r2,-12(fp)
 690:	10800017 	ldw	r2,0(r2)
 694:	10800417 	ldw	r2,16(r2)
 698:	e13ffd17 	ldw	r4,-12(fp)
 69c:	103ee83a 	callr	r2
 6a0:	00000106 	br	6a8 <close+0x78>
 6a4:	0005883a 	mov	r2,zero
 6a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 6ac:	e13fff17 	ldw	r4,-4(fp)
 6b0:	00007740 	call	774 <alt_release_fd>
    if (rval < 0)
 6b4:	e0bffe17 	ldw	r2,-8(fp)
 6b8:	1000070e 	bge	r2,zero,6d8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 6bc:	00005f40 	call	5f4 <alt_get_errno>
 6c0:	1007883a 	mov	r3,r2
 6c4:	e0bffe17 	ldw	r2,-8(fp)
 6c8:	0085c83a 	sub	r2,zero,r2
 6cc:	18800015 	stw	r2,0(r3)
      return -1;
 6d0:	00bfffc4 	movi	r2,-1
 6d4:	00000706 	br	6f4 <close+0xc4>
    }
    return 0;
 6d8:	0005883a 	mov	r2,zero
 6dc:	00000506 	br	6f4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 6e0:	00005f40 	call	5f4 <alt_get_errno>
 6e4:	1007883a 	mov	r3,r2
 6e8:	00801444 	movi	r2,81
 6ec:	18800015 	stw	r2,0(r3)
    return -1;
 6f0:	00bfffc4 	movi	r2,-1
  }
}
 6f4:	e037883a 	mov	sp,fp
 6f8:	dfc00117 	ldw	ra,4(sp)
 6fc:	df000017 	ldw	fp,0(sp)
 700:	dec00204 	addi	sp,sp,8
 704:	f800283a 	ret

00000708 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 708:	deffff04 	addi	sp,sp,-4
 70c:	df000015 	stw	fp,0(sp)
 710:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 714:	0001883a 	nop
 718:	e037883a 	mov	sp,fp
 71c:	df000017 	ldw	fp,0(sp)
 720:	dec00104 	addi	sp,sp,4
 724:	f800283a 	ret

00000728 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 728:	defffc04 	addi	sp,sp,-16
 72c:	df000315 	stw	fp,12(sp)
 730:	df000304 	addi	fp,sp,12
 734:	e13ffd15 	stw	r4,-12(fp)
 738:	e17ffe15 	stw	r5,-8(fp)
 73c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 740:	e0bfff17 	ldw	r2,-4(fp)
}
 744:	e037883a 	mov	sp,fp
 748:	df000017 	ldw	fp,0(sp)
 74c:	dec00104 	addi	sp,sp,4
 750:	f800283a 	ret

00000754 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 754:	deffff04 	addi	sp,sp,-4
 758:	df000015 	stw	fp,0(sp)
 75c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 760:	0001883a 	nop
 764:	e037883a 	mov	sp,fp
 768:	df000017 	ldw	fp,0(sp)
 76c:	dec00104 	addi	sp,sp,4
 770:	f800283a 	ret

00000774 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 774:	defffc04 	addi	sp,sp,-16
 778:	dfc00315 	stw	ra,12(sp)
 77c:	df000215 	stw	fp,8(sp)
 780:	dc000115 	stw	r16,4(sp)
 784:	df000204 	addi	fp,sp,8
 788:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 78c:	e0bffe17 	ldw	r2,-8(fp)
 790:	108000d0 	cmplti	r2,r2,3
 794:	1000111e 	bne	r2,zero,7dc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 798:	04000034 	movhi	r16,0
 79c:	8402d704 	addi	r16,r16,2908
 7a0:	e0bffe17 	ldw	r2,-8(fp)
 7a4:	01400304 	movi	r5,12
 7a8:	1009883a 	mov	r4,r2
 7ac:	00009cc0 	call	9cc <__mulsi3>
 7b0:	8085883a 	add	r2,r16,r2
 7b4:	10800204 	addi	r2,r2,8
 7b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 7bc:	04000034 	movhi	r16,0
 7c0:	8402d704 	addi	r16,r16,2908
 7c4:	e0bffe17 	ldw	r2,-8(fp)
 7c8:	01400304 	movi	r5,12
 7cc:	1009883a 	mov	r4,r2
 7d0:	00009cc0 	call	9cc <__mulsi3>
 7d4:	8085883a 	add	r2,r16,r2
 7d8:	10000015 	stw	zero,0(r2)
  }
}
 7dc:	0001883a 	nop
 7e0:	e6ffff04 	addi	sp,fp,-4
 7e4:	dfc00217 	ldw	ra,8(sp)
 7e8:	df000117 	ldw	fp,4(sp)
 7ec:	dc000017 	ldw	r16,0(sp)
 7f0:	dec00304 	addi	sp,sp,12
 7f4:	f800283a 	ret

000007f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 7f8:	deffff04 	addi	sp,sp,-4
 7fc:	df000015 	stw	fp,0(sp)
 800:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 804:	000170fa 	wrctl	ienable,zero
}
 808:	0001883a 	nop
 80c:	e037883a 	mov	sp,fp
 810:	df000017 	ldw	fp,0(sp)
 814:	dec00104 	addi	sp,sp,4
 818:	f800283a 	ret

0000081c <exit>:
 81c:	defffe04 	addi	sp,sp,-8
 820:	000b883a 	mov	r5,zero
 824:	dc000015 	stw	r16,0(sp)
 828:	dfc00115 	stw	ra,4(sp)
 82c:	2021883a 	mov	r16,r4
 830:	000083c0 	call	83c <__call_exitprocs>
 834:	8009883a 	mov	r4,r16
 838:	00009f40 	call	9f4 <_exit>

0000083c <__call_exitprocs>:
 83c:	defff504 	addi	sp,sp,-44
 840:	dd000515 	stw	r20,20(sp)
 844:	05000034 	movhi	r20,0
 848:	dc800315 	stw	r18,12(sp)
 84c:	dfc00a15 	stw	ra,40(sp)
 850:	df000915 	stw	fp,36(sp)
 854:	ddc00815 	stw	r23,32(sp)
 858:	dd800715 	stw	r22,28(sp)
 85c:	dd400615 	stw	r21,24(sp)
 860:	dcc00415 	stw	r19,16(sp)
 864:	dc400215 	stw	r17,8(sp)
 868:	dc000115 	stw	r16,4(sp)
 86c:	d9000015 	stw	r4,0(sp)
 870:	2825883a 	mov	r18,r5
 874:	a5033a04 	addi	r20,r20,3304
 878:	a4400017 	ldw	r17,0(r20)
 87c:	8cc00c17 	ldw	r19,48(r17)
 880:	8c400c04 	addi	r17,r17,48
 884:	98004526 	beq	r19,zero,99c <__call_exitprocs+0x160>
 888:	9c000117 	ldw	r16,4(r19)
 88c:	00900034 	movhi	r2,16384
 890:	10bfffc4 	addi	r2,r2,-1
 894:	9d402217 	ldw	r21,136(r19)
 898:	85bfffc4 	addi	r22,r16,-1
 89c:	80a1883a 	add	r16,r16,r2
 8a0:	8421883a 	add	r16,r16,r16
 8a4:	8421883a 	add	r16,r16,r16
 8a8:	ac2f883a 	add	r23,r21,r16
 8ac:	84000204 	addi	r16,r16,8
 8b0:	9c21883a 	add	r16,r19,r16
 8b4:	b0002716 	blt	r22,zero,954 <__call_exitprocs+0x118>
 8b8:	90000726 	beq	r18,zero,8d8 <__call_exitprocs+0x9c>
 8bc:	a800041e 	bne	r21,zero,8d0 <__call_exitprocs+0x94>
 8c0:	b5bfffc4 	addi	r22,r22,-1
 8c4:	bdffff04 	addi	r23,r23,-4
 8c8:	843fff04 	addi	r16,r16,-4
 8cc:	003ff906 	br	8b4 <__alt_data_end+0xfffe08b4>
 8d0:	b9002017 	ldw	r4,128(r23)
 8d4:	913ffa1e 	bne	r18,r4,8c0 <__alt_data_end+0xfffe08c0>
 8d8:	99000117 	ldw	r4,4(r19)
 8dc:	82000017 	ldw	r8,0(r16)
 8e0:	213fffc4 	addi	r4,r4,-1
 8e4:	b100021e 	bne	r22,r4,8f0 <__call_exitprocs+0xb4>
 8e8:	9d800115 	stw	r22,4(r19)
 8ec:	00000106 	br	8f4 <__call_exitprocs+0xb8>
 8f0:	80000015 	stw	zero,0(r16)
 8f4:	403ff226 	beq	r8,zero,8c0 <__alt_data_end+0xfffe08c0>
 8f8:	9f000117 	ldw	fp,4(r19)
 8fc:	a8000526 	beq	r21,zero,914 <__call_exitprocs+0xd8>
 900:	00800044 	movi	r2,1
 904:	1592983a 	sll	r9,r2,r22
 908:	a9404017 	ldw	r5,256(r21)
 90c:	494a703a 	and	r5,r9,r5
 910:	2800021e 	bne	r5,zero,91c <__call_exitprocs+0xe0>
 914:	403ee83a 	callr	r8
 918:	00000906 	br	940 <__call_exitprocs+0x104>
 91c:	a9004117 	ldw	r4,260(r21)
 920:	4908703a 	and	r4,r9,r4
 924:	2000041e 	bne	r4,zero,938 <__call_exitprocs+0xfc>
 928:	b9400017 	ldw	r5,0(r23)
 92c:	d9000017 	ldw	r4,0(sp)
 930:	403ee83a 	callr	r8
 934:	00000206 	br	940 <__call_exitprocs+0x104>
 938:	b9000017 	ldw	r4,0(r23)
 93c:	403ee83a 	callr	r8
 940:	99000117 	ldw	r4,4(r19)
 944:	e13fcc1e 	bne	fp,r4,878 <__alt_data_end+0xfffe0878>
 948:	89000017 	ldw	r4,0(r17)
 94c:	993fdc26 	beq	r19,r4,8c0 <__alt_data_end+0xfffe08c0>
 950:	003fc906 	br	878 <__alt_data_end+0xfffe0878>
 954:	00800034 	movhi	r2,0
 958:	10800004 	addi	r2,r2,0
 95c:	10000f26 	beq	r2,zero,99c <__call_exitprocs+0x160>
 960:	99400117 	ldw	r5,4(r19)
 964:	99000017 	ldw	r4,0(r19)
 968:	2800091e 	bne	r5,zero,990 <__call_exitprocs+0x154>
 96c:	20000826 	beq	r4,zero,990 <__call_exitprocs+0x154>
 970:	89000015 	stw	r4,0(r17)
 974:	a8000226 	beq	r21,zero,980 <__call_exitprocs+0x144>
 978:	a809883a 	mov	r4,r21
 97c:	00000000 	call	0 <__reset>
 980:	9809883a 	mov	r4,r19
 984:	00000000 	call	0 <__reset>
 988:	8cc00017 	ldw	r19,0(r17)
 98c:	003fbd06 	br	884 <__alt_data_end+0xfffe0884>
 990:	9823883a 	mov	r17,r19
 994:	2027883a 	mov	r19,r4
 998:	003fba06 	br	884 <__alt_data_end+0xfffe0884>
 99c:	dfc00a17 	ldw	ra,40(sp)
 9a0:	df000917 	ldw	fp,36(sp)
 9a4:	ddc00817 	ldw	r23,32(sp)
 9a8:	dd800717 	ldw	r22,28(sp)
 9ac:	dd400617 	ldw	r21,24(sp)
 9b0:	dd000517 	ldw	r20,20(sp)
 9b4:	dcc00417 	ldw	r19,16(sp)
 9b8:	dc800317 	ldw	r18,12(sp)
 9bc:	dc400217 	ldw	r17,8(sp)
 9c0:	dc000117 	ldw	r16,4(sp)
 9c4:	dec00b04 	addi	sp,sp,44
 9c8:	f800283a 	ret

000009cc <__mulsi3>:
 9cc:	0005883a 	mov	r2,zero
 9d0:	20000726 	beq	r4,zero,9f0 <__mulsi3+0x24>
 9d4:	20c0004c 	andi	r3,r4,1
 9d8:	2008d07a 	srli	r4,r4,1
 9dc:	18000126 	beq	r3,zero,9e4 <__mulsi3+0x18>
 9e0:	1145883a 	add	r2,r2,r5
 9e4:	294b883a 	add	r5,r5,r5
 9e8:	203ffa1e 	bne	r4,zero,9d4 <__alt_data_end+0xfffe09d4>
 9ec:	f800283a 	ret
 9f0:	f800283a 	ret

000009f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 9f4:	defffd04 	addi	sp,sp,-12
 9f8:	df000215 	stw	fp,8(sp)
 9fc:	df000204 	addi	fp,sp,8
 a00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 a04:	0001883a 	nop
 a08:	e0bfff17 	ldw	r2,-4(fp)
 a0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 a10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 a14:	10000226 	beq	r2,zero,a20 <_exit+0x2c>
    ALT_SIM_FAIL();
 a18:	002af070 	cmpltui	zero,zero,43969
 a1c:	00000106 	br	a24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 a20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 a24:	003fff06 	br	a24 <__alt_data_end+0xfffe0a24>
